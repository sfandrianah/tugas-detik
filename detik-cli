<?php

use app\util\DB;

$GLOBALS["HIT_TYPE"] = "CLI";
$currentPath = __DIR__;
$GLOBALS["MAIN_DIR"] = $currentPath;
include_once __DIR__ . '/app/util/helpers.php';
spl_autoload_register(function ($class_name) {
    if (file_exists(__DIR__ . '/' . $class_name . '.php')) {
        include __DIR__ . '/' . $class_name . '.php';
    } else if (file_exists(__DIR__ . '/' . $class_name . '.php')) {
        include __DIR__ . '/' . strtolower($class_name) . '.php';
    } else {
//        echo $class_name;
        $class_name = str_replace('/', '\\', $class_name);
        if (file_exists(__DIR__ . '/' . $class_name . '.php')) {
            include __DIR__ . '/' . $class_name . '.php';
        } else {
            $class_name = str_replace('\\', '/', $class_name);
            if (file_exists(__DIR__ . '/' . $class_name . '.php')) {
                include __DIR__ . '/' . $class_name . '.php';
            }
        }
    }

});
init($argv);
function init($argv)
{
    $GLOBALS["ARGUMENTS"] = $argv;
//    echo json_encode($GLOBALS["ARGUMENTS"]);
    $isExistDB = false;
    if (file_exists(__DIR__ . "/config.json")) {
        $fileJsonConfig = file_get_contents(__DIR__ . "/config.json");
        $data = @json_decode($fileJsonConfig);
        if ($data === null
            && json_last_error() !== JSON_ERROR_NONE) {
//        echo "incorrect data";
        } else {
            if (isset($data->database)) {
                $dbData = $data->database;
                $dbDataConfig = array();
                if (isset($dbData->db_host)) {
                    $dbHost = $dbData->db_host;
                    $dbDataConfig["db_host"] = $dbHost;
                }
                if (isset($dbData->db_port)) {
                    $dbPort = $dbData->db_port;
                    $dbDataConfig["db_port"] = $dbPort;
                }
                if (isset($dbData->db_host)) {
                    $dbHost = $dbData->db_host;
                    $dbDataConfig["db_host"] = $dbHost;
                }
                if (isset($dbData->db_username)) {
                    $dbUsername = $dbData->db_username;
                    $dbDataConfig["db_username"] = $dbUsername;
                }
                if (isset($dbData->db_password)) {
                    $dbPassword = $dbData->db_password;
                    $dbDataConfig["db_password"] = $dbPassword;
                }
                if (isset($dbData->db_name)) {
                    $dbName = $dbData->db_name;
                    $dbDataConfig["db_name"] = $dbName;
                }
                $isExistDB = true;
                $GLOBALS["DB_DATA_CONFIG"] = $dbDataConfig;
            }
        }
    }
    $isTransaction = false;
    if (in_array("--init-db", $GLOBALS["ARGUMENTS"])) {
        $isExistDB = false;
    } else if (in_array("transaction", $GLOBALS["ARGUMENTS"])) {
        $isTransaction = true;
    }
//$dirConfig =
    if ($isTransaction) {
        $arguments = $GLOBALS["ARGUMENTS"];
//        echo json_encode($arguments);
        $ref_id = null;
        $status = null;
        if(isset($arguments[2])){
            $ref_id = $arguments[2];
        }
        if(isset($arguments[3])){
            $status = $arguments[3];
        }
        $currentDateTimestamp = date("Y-m-d H:i:s");
        if($status == "PENDING" || $status == "PAID" || $status == "FAILED") {
            $check_payment = DB::query("SELECT * FROM trx_payment WHERE references_id = '" . $ref_id . "' ");
            if ($check_payment->result()) {
                $get_payment = $check_payment->get();
                if (count($get_payment) > 0) {
                    $itemPayment = $get_payment[0];
                    $query_update = "UPDATE trx_payment SET status='" . $status . " AND modified_on='".$currentDateTimestamp."' WHERE references_id = '" . $ref_id . "' ";
                    $res_update = DB::query($query_update);
                    if ($res_update->result()) {
                        echo colorLog("transaction success", "s");
                    } else {
                        echo colorLog("transaction failed", "e");
                    }
                } else {
                    echo colorLog("references_id not found", "e");
                }
            } else {
                echo colorLog("references_id not found", "e");
            }
        } else {
            echo colorLog("payment_type only PENDING, PAID & FAILED", "e");
        }
    } else {
        if ($isExistDB == false) {
            if (in_array("--init-db", $GLOBALS["ARGUMENTS"])) {
                echo colorLog("Re-Configuration Database") . "\n";
            } else {
                echo colorLog("Please Configuration Database for running this application.") . "\n";
            }

            initDB($argv);
        }
        if (isset($GLOBALS["DB_DATA_CONFIG"])) {
            $dbDataConfig = $GLOBALS["DB_DATA_CONFIG"];
            $connect = connect($argv);
            if ($connect) {
//            $conn = null;
                migrate();
                openAndRun($argv);
            }
        }
    }
}

function openAndRun($argv)
{
    $urlLocal = "127.0.0.1";
    $port = "6789";
    $url = "http://" . $urlLocal . ":" . $port;
    switch (PHP_OS) {
        case 'Darwin':
            $opener = 'open';
            break;
        case 'WINNT':
            $opener = 'start';
            break;
        default:
            $opener = 'xdg-open';
    }
    echo colorLog("\nApplication started to " . $url . "\n", "s");
    exec("php -S $urlLocal:$port ");
//    exec("php -S $urlLocal:$port & ".sprintf('%s %s', $opener, $url));
}

function migrate()
{
    $currentDateTimestamp = date("Y-m-d H:i:s");
//    include_once __DIR__ . "/app/util/DB.php";
    $showConfig = DB::showConfig();
    $dbName = $showConfig["db_name"];
    $migrateTableName = "migrations";
    $migrateTableSQL = "CREATE TABLE $migrateTableName  ("
        . " `filename` varchar(255) NOT NULL,"
        . " `created_on` timestamp NULL,"
        . " PRIMARY KEY (`filename`)"
        . " );";
    $selectTable = "SELECT * FROM information_schema.tables WHERE table_schema = '$dbName' AND table_name = '$migrateTableName' LIMIT 1";
    $getCheckDB = DB::query($selectTable);
    if ($getCheckDB->result()) {
        $getData = $getCheckDB->get();
        if (count($getData) == 0) {
            $migDB = DB::query($migrateTableSQL);
        }
    }
    $listTableMigrate = ["mst_merchant", "trx_payment"];
    foreach ($listTableMigrate as $itemTable) {
//        $selectTable = "SELECT * FROM information_schema.tables WHERE table_schema = '$dbName' AND table_name = '$itemTable' LIMIT 1";
        $selectTable = "SELECT * FROM migrations WHERE filename = '$itemTable'";
        $getCheckDB = DB::query($selectTable);
        if ($getCheckDB->result()) {
            $getData = $getCheckDB->get();
//            echo json_encode($getData);
            if (count($getData) > 0) {
                echo colorLog("Already Table $itemTable", "s") . "\n";
            } else {
                $fileMigrate = file_get_contents(__DIR__ . "/migrations/$itemTable.sql");
                $migDB = DB::query($fileMigrate);
                if ($migDB->result()) {
                    $dataInsertMigrate = array(
                        "filename" => $itemTable,
                        "created_on" => $currentDateTimestamp
                    );
                    DB::table("migrations")->save($dataInsertMigrate);
                    echo colorLog("Migrations Table $itemTable Successfully", "s") . "\n";
                }
            }
        }
    }

}

function initDB($argv)
{
    writeInToFile("DB Host (127.0.0.1)", "db_host");
    writeInToFile("DB Port (3306)", "db_port");
    writeInToFile("DB Username (root)", "db_username");
    writeInToFile("DB Password", "db_password");
    writeInToFile("DB Name (db_tugas_detik)", "db_name");
}

function connect($argv)
{
    $dbDataConfig = $GLOBALS["DB_DATA_CONFIG"];
    $servername = $dbDataConfig["db_host"];
    $username = $dbDataConfig["db_username"];
    $password = $dbDataConfig["db_password"];
    $port = $dbDataConfig["db_port"];
    $dbname = $dbDataConfig["db_name"];
    try {
        $conn = new PDO("mysql:host=$servername;port=$port;", $username, $password);
        // set the PDO error mode to exception
        $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        echo colorLog("Connected successfully", "s") . "\n";
        $sql = "SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME = '" . $dbname . "'";
        $STH = $conn->prepare($sql);
        $STH->execute();
        $result = $STH->fetchAll();
//        $resExec = $conn->exec($sql);
        $isResult = false;
        if (count($result) > 0) {
            $isResult = true;

        } else {
            $insert_QUERY = $conn->prepare("CREATE DATABASE IF NOT EXISTS $dbname");
            $insert_QUERY->execute();
            $databaseErrors = $insert_QUERY->errorInfo();
            if (!empty($databaseErrors)) {
                if (intval($databaseErrors[0]) == "0") {
                    echo colorLog("Create Database $dbname successfully", "s") . "\n";
                    $dataConfig = array(
                        "database" => $dbDataConfig
                    );
                    file_put_contents(__DIR__ . "/config.json", json_encode($dataConfig));
                    $isResult = true;
                } else {
                    $errorInfo = print_r($databaseErrors, true); # true flag returns val rather than print
                    $errorLogMsg = "error info: $errorInfo";
                    echo $errorLogMsg . "\nCreate Database $dbname Failed: \n Please Configuration Database Set it correctly\n";
//                    initDB($argv);
                    return init($argv);
                }

            } else {
                echo colorLog("Create Database $dbname successfully", "s") . "\n";
            }
        }
        return $isResult;


//        print_r($result);

    } catch (PDOException $e) {
        echo "Connection failed: \n";
        echo "File : " . $e->getFile() . "\n";
        echo "Line : " . $e->getLine() . "\n";
        echo "Message : " . $e->getMessage() . "\n";
        echo "Please Configuration Database Set it correctly\n";
//        \n Line: ".$e->getLine()."\n Please Configuration Database Set it correctly";
//        echo "Connection failed: " . $e->getMessage() . ", Line: ".$e->getLine()."\n Please Configuration Database Set it correctly";
        return init($argv);
    }
}

function writeInToFile($title, $key)
{
    echo $title . " = ";
    $input = trim(fgets(STDIN));
    if (trim($input) == "") {

        if ($key == "db_host") {
            $input = "127.0.0.1";
        } else if ($key == "db_port") {
            $input = "3306";
        } else if ($key == "db_username") {
            $input = "root";
        } else if ($key == "db_password") {
            $input = "";
        } else if ($key == "db_name") {
            $input = "db_tugas_detik";
        } else {
            echo "Please, Try Again\n";
            if (isset($GLOBALS["start_write"])) {
                $GLOBALS["start_write"] += 1;
            } else {
                $GLOBALS["start_write"] = 1;
            }

            if ($GLOBALS["start_write"] >= 5) {
                exit();
            }
            return writeInToFile($title, $key);
        }

    }
    if ($key == "db_host" || $key == "db_port" || $key == "db_username" || $key == "db_password"
        || $key == "db_name"
    ) {
        if (isset($GLOBALS["DB_DATA_CONFIG"])) {
            $GLOBALS["DB_DATA_CONFIG"][$key] = $input;
        } else {
            $GLOBALS["DB_DATA_CONFIG"] = array(
                $key => $input
            );
        }
    }
    $GLOBALS["start_write"] = 1;
}

function colorLog($str, $type = 'i')
{
    $result = "";
    switch ($type) {
        case 'e': //error
            $result = "\033[31m$str \033[0m";
            break;
        case 's': //success
            $result = "\033[32m$str \033[0m";
            break;
        case 'w': //warning
            $result = "\033[33m$str \033[0m";
            break;
        case 'i': //info
            $result = "\033[36m$str \033[0m";
            break;
        default:
            # code...
            break;
    }
    return $result;
}
